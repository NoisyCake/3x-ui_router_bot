from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.fsm.state import default_state, State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from database import requests
from lexicon.lexicon import LEXICON
from keyboards.user_kbs import create_main_kb, create_period_kb

router = Router()

class FSMEnterContract(StatesGroup):
    enter_contract = State()
    correct_contract = State()
    renew_subscription = State()

#TODO —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –¥–æ –¥—Ä—É–≥–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart(), StateFilter(default_state))
async def process_start_command(message: Message, state: FSMContext, session: AsyncSession):
    user = await requests.orm_get_user(session, message.from_user.id)
    if user:
        await message.answer(
            text=LEXICON['//start'],
            reply_markup=create_main_kb()
        )
        await state.set_state(FSMEnterContract.correct_contract)
    else:
        await message.answer(
            text=LEXICON['/start'],
            reply_markup=create_main_kb()
        )
        await state.set_state(FSMEnterContract.enter_contract)

    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ /start
@router.message(CommandStart(), ~StateFilter(default_state))
async def process_another_start_command(message: Message, state: FSMContext):
    await message.answer(
        text=LEXICON['//start'],
        reply_markup=create_main_kb
    )
    await state.set_state(FSMEnterContract.correct_contract)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
@router.message(FSMEnterContract.enter_contract, F.text)
async def process_contract_sent(message: Message, state: FSMContext, session: AsyncSession):
    success = await requests.orm_user_bind_contract(session, message.text, message.from_user.id)
    if success:
        await message.answer(
            text=LEXICON['correct_contract_num'],
            reply_markup=create_main_kb()
        )
        await state.set_state(FSMEnterContract.correct_contract)
    else:
        await message.answer(text=LEXICON['contract_not_found'])


# --------------------------------------------------------------------------

    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
@router.message(FSMEnterContract.correct_contract, F.text == "üîë –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def process_renew_sub_button(message: Message):
    await message.answer(
        text=LEXICON['renew_subscription'],
        reply_markup=create_period_kb()
    )
    
    
#TODO –¢—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–≤–µ—Ä–Ω


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(FSMEnterContract.correct_contract, F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def process_profile_button(message: Message, session: AsyncSession):
    user = await requests.orm_get_user(session, message.from_user.id)
    print(user)
    await message.answer(text=LEXICON['profile'].format(
        contract_num=user.contract_num,
        sub_status=(LEXICON['inactive'], LEXICON['active'])[user.subscription],
        exp_date=user.exp_date
    ))
  
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏
@router.message(FSMEnterContract.correct_contract, F.text == "‚ùì –ü–æ–º–æ—â—å")
async def process_reply_help_button(message: Message):
    await message.answer(text=LEXICON['help'])
    
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ about
@router.message(FSMEnterContract.correct_contract, F.text == "üß† –û–± HFK")
async def process_about_button(message: Message):
    await message.answer(text=LEXICON['about'])